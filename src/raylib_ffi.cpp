
//
// File generated by generate_bindings.gleam.
//

#include <erl_nif.h>
#include <iostream>
#include <raylib.h>
#include <rlgl.h>

static ERL_NIF_TERM rl_load_draw_quad(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlLoadDrawQuad();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_load_draw_cube(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlLoadDrawCube();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_bind_image_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int arg1;
enif_get_uint(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
unsigned int arg3;
enif_get_uint(env, argv[3], &arg3);
rlBindImageTexture(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_get_shader_buffer_size(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int result = rlGetShaderBufferSize(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_copy_shader_buffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int arg1;
enif_get_uint(env, argv[1], &arg1);
unsigned int arg2;
enif_get_uint(env, argv[2], &arg2);
unsigned int arg3;
enif_get_uint(env, argv[3], &arg3);
unsigned int arg4;
enif_get_uint(env, argv[4], &arg4);
rlCopyShaderBuffer(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_bind_shader_buffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int arg1;
enif_get_uint(env, argv[1], &arg1);
rlBindShaderBuffer(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_unload_shader_buffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlUnloadShaderBuffer(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_compute_shader_dispatch(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int arg1;
enif_get_uint(env, argv[1], &arg1);
unsigned int arg2;
enif_get_uint(env, argv[2], &arg2);
rlComputeShaderDispatch(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_load_compute_shader_program(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int result = rlLoadComputeShaderProgram(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_set_uniform_sampler(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int arg1;
enif_get_uint(env, argv[1], &arg1);
rlSetUniformSampler(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_get_location_attrib(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
char arg1[1024];
if (!enif_get_string(env, argv[1], arg1, sizeof(arg1), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int result = rlGetLocationAttrib(arg0, arg1);
return enif_make_int(env, result);
}

static ERL_NIF_TERM rl_get_location_uniform(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
char arg1[1024];
if (!enif_get_string(env, argv[1], arg1, sizeof(arg1), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int result = rlGetLocationUniform(arg0, arg1);
return enif_make_int(env, result);
}

static ERL_NIF_TERM rl_unload_shader_program(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlUnloadShaderProgram(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_load_shader_program(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int arg1;
enif_get_uint(env, argv[1], &arg1);
unsigned int result = rlLoadShaderProgram(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_compile_shader(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int arg1;
enif_get_int(env, argv[1], &arg1);
unsigned int result = rlCompileShader(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_load_shader_code(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
char arg1[1024];
if (!enif_get_string(env, argv[1], arg1, sizeof(arg1), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
unsigned int result = rlLoadShaderCode(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_unload_framebuffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlUnloadFramebuffer(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_framebuffer_complete(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int result = rlFramebufferComplete(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_framebuffer_attach(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int arg1;
enif_get_uint(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
int arg4;
enif_get_int(env, argv[4], &arg4);
rlFramebufferAttach(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_load_framebuffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
unsigned int result = rlLoadFramebuffer(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_unload_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlUnloadTexture(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_load_texture_depth(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
unsigned int arg2;
enif_get_uint(env, argv[2], &arg2);
unsigned int result = rlLoadTextureDepth(arg0, arg1, arg2);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_draw_vertex_array_instanced(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
rlDrawVertexArrayInstanced(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_draw_vertex_array(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
rlDrawVertexArray(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_set_vertex_attribute_divisor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
rlSetVertexAttributeDivisor(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_unload_vertex_buffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlUnloadVertexBuffer(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_unload_vertex_array(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlUnloadVertexArray(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_load_vertex_array(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = rlLoadVertexArray();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_set_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlSetTexture(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_check_render_batch_limit(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = rlCheckRenderBatchLimit(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_draw_render_batch_active(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDrawRenderBatchActive();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_get_shader_id_default(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = rlGetShaderIdDefault();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_get_texture_id_default(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = rlGetTextureIdDefault();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_get_framebuffer_height(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = rlGetFramebufferHeight();
return enif_make_int(env, result);
}

static ERL_NIF_TERM rl_set_framebuffer_height(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
rlSetFramebufferHeight(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_get_framebuffer_width(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = rlGetFramebufferWidth();
return enif_make_int(env, result);
}

static ERL_NIF_TERM rl_set_framebuffer_width(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
rlSetFramebufferWidth(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_get_version(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = rlGetVersion();
return enif_make_int(env, result);
}

static ERL_NIF_TERM rlgl_close(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlglClose();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rlgl_init(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
rlglInit(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_set_blend_factors_separate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
int arg4;
enif_get_int(env, argv[4], &arg4);
int arg5;
enif_get_int(env, argv[5], &arg5);
rlSetBlendFactorsSeparate(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_set_blend_factors(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
rlSetBlendFactors(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_set_blend_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
rlSetBlendMode(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_check_errors(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlCheckErrors();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_clear_screen_buffers(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlClearScreenBuffers();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_is_stereo_render_enabled(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = rlIsStereoRenderEnabled();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_disable_stereo_render(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableStereoRender();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_stereo_render(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnableStereoRender();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_smooth_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableSmoothLines();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_smooth_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnableSmoothLines();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_get_line_width(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

float result = rlGetLineWidth();
return enif_make_double(env, (double)result);
}

static ERL_NIF_TERM rl_set_line_width(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
rlSetLineWidth(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_wire_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableWireMode();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_point_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnablePointMode();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_wire_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnableWireMode();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_scissor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
rlScissor(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_scissor_test(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableScissorTest();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_scissor_test(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnableScissorTest();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_set_cull_face(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
rlSetCullFace(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_backface_culling(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableBackfaceCulling();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_backface_culling(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnableBackfaceCulling();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_depth_mask(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableDepthMask();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_depth_mask(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnableDepthMask();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_depth_test(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableDepthTest();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_depth_test(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnableDepthTest();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_color_blend(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableColorBlend();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_color_blend(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnableColorBlend();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_blit_framebuffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
int arg4;
enif_get_int(env, argv[4], &arg4);
int arg5;
enif_get_int(env, argv[5], &arg5);
int arg6;
enif_get_int(env, argv[6], &arg6);
int arg7;
enif_get_int(env, argv[7], &arg7);
int arg8;
enif_get_int(env, argv[8], &arg8);
rlBlitFramebuffer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_active_draw_buffers(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
rlActiveDrawBuffers(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_framebuffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableFramebuffer();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_framebuffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlEnableFramebuffer(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_shader(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableShader();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_shader(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlEnableShader(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_cubemap_parameters(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
rlCubemapParameters(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_texture_parameters(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
rlTextureParameters(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_texture_cubemap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableTextureCubemap();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_texture_cubemap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlEnableTextureCubemap(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableTexture();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlEnableTexture(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_active_texture_slot(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
rlActiveTextureSlot(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_vertex_attribute(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlDisableVertexAttribute(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_vertex_attribute(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlEnableVertexAttribute(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_vertex_buffer_element(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableVertexBufferElement();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_vertex_buffer_element(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlEnableVertexBufferElement(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_vertex_buffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableVertexBuffer();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_vertex_buffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
rlEnableVertexBuffer(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_disable_vertex_array(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlDisableVertexArray();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_enable_vertex_array(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int result = rlEnableVertexArray(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM rl_color4f(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
rlColor4f(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_color3f(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
rlColor3f(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_normal3f(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
rlNormal3f(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_tex_coord2f(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
rlTexCoord2f(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_vertex3f(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
rlVertex3f(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_vertex2f(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
rlVertex2f(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_vertex2i(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
rlVertex2i(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_end(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlEnd();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_begin(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
rlBegin(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_viewport(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
rlViewport(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_scalef(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
rlScalef(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_rotatef(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
rlRotatef(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_translatef(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
rlTranslatef(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_load_identity(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlLoadIdentity();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_pop_matrix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlPopMatrix();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_push_matrix(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

rlPushMatrix();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM rl_matrix_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
rlMatrixMode(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_audio_stream_buffer_size_default(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
SetAudioStreamBufferSizeDefault(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_master_volume(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

float result = GetMasterVolume();
return enif_make_double(env, (double)result);
}

static ERL_NIF_TERM set_master_volume(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
SetMasterVolume(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM is_audio_device_ready(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsAudioDeviceReady();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM close_audio_device(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

CloseAudioDevice();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM init_audio_device(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

InitAudioDevice();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_grid(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
DrawGrid(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM text_to_integer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int result = TextToInteger(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM text_find_index(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
char arg1[1024];
if (!enif_get_string(env, argv[1], arg1, sizeof(arg1), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int result = TextFindIndex(arg0, arg1);
return enif_make_int(env, result);
}

static ERL_NIF_TERM text_length(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
unsigned int result = TextLength(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM text_is_equal(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
char arg1[1024];
if (!enif_get_string(env, argv[1], arg1, sizeof(arg1), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
unsigned int result = TextIsEqual(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM get_codepoint_count(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int result = GetCodepointCount(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM measure_text(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int arg1;
enif_get_int(env, argv[1], &arg1);
int result = MeasureText(arg0, arg1);
return enif_make_int(env, result);
}

static ERL_NIF_TERM set_text_line_spacing(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
SetTextLineSpacing(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_text(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawText(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_fps(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
DrawFPS(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_pixel_data_size(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int result = GetPixelDataSize(arg0, arg1, arg2);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_color(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
Color color = GetColor(arg0);
return enif_make_int(env, ColorToInt(color));
}

static ERL_NIF_TERM color_alpha_blend(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int tmp_arg0;
enif_get_uint(env, argv[0], &tmp_arg0);
Color arg0 = GetColor(tmp_arg0);
unsigned int tmp_arg1;
enif_get_uint(env, argv[1], &tmp_arg1);
Color arg1 = GetColor(tmp_arg1);
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
Color color = ColorAlphaBlend(arg0, arg1, arg2);
return enif_make_int(env, ColorToInt(color));
}

static ERL_NIF_TERM color_alpha(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int tmp_arg0;
enif_get_uint(env, argv[0], &tmp_arg0);
Color arg0 = GetColor(tmp_arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
Color color = ColorAlpha(arg0, arg1);
return enif_make_int(env, ColorToInt(color));
}

static ERL_NIF_TERM color_contrast(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int tmp_arg0;
enif_get_uint(env, argv[0], &tmp_arg0);
Color arg0 = GetColor(tmp_arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
Color color = ColorContrast(arg0, arg1);
return enif_make_int(env, ColorToInt(color));
}

static ERL_NIF_TERM color_brightness(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int tmp_arg0;
enif_get_uint(env, argv[0], &tmp_arg0);
Color arg0 = GetColor(tmp_arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
Color color = ColorBrightness(arg0, arg1);
return enif_make_int(env, ColorToInt(color));
}

static ERL_NIF_TERM color_tint(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int tmp_arg0;
enif_get_uint(env, argv[0], &tmp_arg0);
Color arg0 = GetColor(tmp_arg0);
unsigned int tmp_arg1;
enif_get_uint(env, argv[1], &tmp_arg1);
Color arg1 = GetColor(tmp_arg1);
Color color = ColorTint(arg0, arg1);
return enif_make_int(env, ColorToInt(color));
}

static ERL_NIF_TERM color_from_hsv(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
Color color = ColorFromHSV(arg0, arg1, arg2);
return enif_make_int(env, ColorToInt(color));
}

static ERL_NIF_TERM color_to_int(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int tmp_arg0;
enif_get_uint(env, argv[0], &tmp_arg0);
Color arg0 = GetColor(tmp_arg0);
int result = ColorToInt(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM fade(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int tmp_arg0;
enif_get_uint(env, argv[0], &tmp_arg0);
Color arg0 = GetColor(tmp_arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
Color color = Fade(arg0, arg1);
return enif_make_int(env, ColorToInt(color));
}

static ERL_NIF_TERM draw_texture_pro(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
double tmp_arg1_width;
enif_get_double(env, tmp_arg1[3], &tmp_arg1_width);
double tmp_arg1_height;
enif_get_double(env, tmp_arg1[4], &tmp_arg1_height);
Rectangle arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
arg1.width = (float)tmp_arg1_width;
arg1.height = (float)tmp_arg1_height;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
double tmp_arg2_width;
enif_get_double(env, tmp_arg2[3], &tmp_arg2_width);
double tmp_arg2_height;
enif_get_double(env, tmp_arg2[4], &tmp_arg2_height);
Rectangle arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
arg2.width = (float)tmp_arg2_width;
arg2.height = (float)tmp_arg2_height;

const ERL_NIF_TERM* tmp_arg3;
int arity3;
enif_get_tuple(env, argv[3], &arity3, &tmp_arg3);
double tmp_arg3_x;
enif_get_double(env, tmp_arg3[1], &tmp_arg3_x);
double tmp_arg3_y;
enif_get_double(env, tmp_arg3[2], &tmp_arg3_y);
Vector2 arg3;
arg3.x = (float)tmp_arg3_x;
arg3.y = (float)tmp_arg3_y;
double arg4;
enif_get_double(env, argv[4], &arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawTexturePro(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_texture_rec(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
double tmp_arg1_width;
enif_get_double(env, tmp_arg1[3], &tmp_arg1_width);
double tmp_arg1_height;
enif_get_double(env, tmp_arg1[4], &tmp_arg1_height);
Rectangle arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
arg1.width = (float)tmp_arg1_width;
arg1.height = (float)tmp_arg1_height;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawTextureRec(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_texture_ex(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawTextureEx(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_texture_v(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
DrawTextureV(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawTexture(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_texture_wrap(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;
int arg1;
enif_get_int(env, argv[1], &arg1);
SetTextureWrap(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_texture_filter(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;
int arg1;
enif_get_int(env, argv[1], &arg1);
SetTextureFilter(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM unload_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;
UnloadTexture(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM is_texture_ready(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;
unsigned int result = IsTextureReady(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM load_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
Texture2D texture = LoadTexture(arg0);
return enif_make_tuple6(
  env,
  enif_make_int(env, 0),
  enif_make_uint(env, texture.id),
  enif_make_int(env, texture.width),
  enif_make_int(env, texture.height),
  enif_make_int(env, texture.mipmaps),
  enif_make_int(env, texture.format)
);
}

static ERL_NIF_TERM check_collision_point_line(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
int arg3;
enif_get_int(env, argv[3], &arg3);
unsigned int result = CheckCollisionPointLine(arg0, arg1, arg2, arg3);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM check_collision_point_triangle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;

const ERL_NIF_TERM* tmp_arg3;
int arity3;
enif_get_tuple(env, argv[3], &arity3, &tmp_arg3);
double tmp_arg3_x;
enif_get_double(env, tmp_arg3[1], &tmp_arg3_x);
double tmp_arg3_y;
enif_get_double(env, tmp_arg3[2], &tmp_arg3_y);
Vector2 arg3;
arg3.x = (float)tmp_arg3_x;
arg3.y = (float)tmp_arg3_y;
unsigned int result = CheckCollisionPointTriangle(arg0, arg1, arg2, arg3);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM check_collision_point_circle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
double arg2;
enif_get_double(env, argv[2], &arg2);
unsigned int result = CheckCollisionPointCircle(arg0, arg1, arg2);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM check_collision_point_rec(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
double tmp_arg1_width;
enif_get_double(env, tmp_arg1[3], &tmp_arg1_width);
double tmp_arg1_height;
enif_get_double(env, tmp_arg1[4], &tmp_arg1_height);
Rectangle arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
arg1.width = (float)tmp_arg1_width;
arg1.height = (float)tmp_arg1_height;
unsigned int result = CheckCollisionPointRec(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM check_collision_circle_rec(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
double arg1;
enif_get_double(env, argv[1], &arg1);

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
double tmp_arg2_width;
enif_get_double(env, tmp_arg2[3], &tmp_arg2_width);
double tmp_arg2_height;
enif_get_double(env, tmp_arg2[4], &tmp_arg2_height);
Rectangle arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
arg2.width = (float)tmp_arg2_width;
arg2.height = (float)tmp_arg2_height;
unsigned int result = CheckCollisionCircleRec(arg0, arg1, arg2);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM check_collision_circles(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
double arg1;
enif_get_double(env, argv[1], &arg1);

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
double arg3;
enif_get_double(env, argv[3], &arg3);
unsigned int result = CheckCollisionCircles(arg0, arg1, arg2, arg3);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM check_collision_recs(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
double tmp_arg0_width;
enif_get_double(env, tmp_arg0[3], &tmp_arg0_width);
double tmp_arg0_height;
enif_get_double(env, tmp_arg0[4], &tmp_arg0_height);
Rectangle arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
arg0.width = (float)tmp_arg0_width;
arg0.height = (float)tmp_arg0_height;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
double tmp_arg1_width;
enif_get_double(env, tmp_arg1[3], &tmp_arg1_width);
double tmp_arg1_height;
enif_get_double(env, tmp_arg1[4], &tmp_arg1_height);
Rectangle arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
arg1.width = (float)tmp_arg1_width;
arg1.height = (float)tmp_arg1_height;
unsigned int result = CheckCollisionRecs(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM get_spline_point_bezier_cubic(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;

const ERL_NIF_TERM* tmp_arg3;
int arity3;
enif_get_tuple(env, argv[3], &arity3, &tmp_arg3);
double tmp_arg3_x;
enif_get_double(env, tmp_arg3[1], &tmp_arg3_x);
double tmp_arg3_y;
enif_get_double(env, tmp_arg3[2], &tmp_arg3_y);
Vector2 arg3;
arg3.x = (float)tmp_arg3_x;
arg3.y = (float)tmp_arg3_y;
double arg4;
enif_get_double(env, argv[4], &arg4);
Vector2 v = GetSplinePointBezierCubic(arg0, arg1, arg2, arg3, arg4);
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_spline_point_bezier_quad(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
double arg3;
enif_get_double(env, argv[3], &arg3);
Vector2 v = GetSplinePointBezierQuad(arg0, arg1, arg2, arg3);
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_spline_point_catmull_rom(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;

const ERL_NIF_TERM* tmp_arg3;
int arity3;
enif_get_tuple(env, argv[3], &arity3, &tmp_arg3);
double tmp_arg3_x;
enif_get_double(env, tmp_arg3[1], &tmp_arg3_x);
double tmp_arg3_y;
enif_get_double(env, tmp_arg3[2], &tmp_arg3_y);
Vector2 arg3;
arg3.x = (float)tmp_arg3_x;
arg3.y = (float)tmp_arg3_y;
double arg4;
enif_get_double(env, argv[4], &arg4);
Vector2 v = GetSplinePointCatmullRom(arg0, arg1, arg2, arg3, arg4);
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_spline_point_basis(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;

const ERL_NIF_TERM* tmp_arg3;
int arity3;
enif_get_tuple(env, argv[3], &arity3, &tmp_arg3);
double tmp_arg3_x;
enif_get_double(env, tmp_arg3[1], &tmp_arg3_x);
double tmp_arg3_y;
enif_get_double(env, tmp_arg3[2], &tmp_arg3_y);
Vector2 arg3;
arg3.x = (float)tmp_arg3_x;
arg3.y = (float)tmp_arg3_y;
double arg4;
enif_get_double(env, argv[4], &arg4);
Vector2 v = GetSplinePointBasis(arg0, arg1, arg2, arg3, arg4);
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_spline_point_linear(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
double arg2;
enif_get_double(env, argv[2], &arg2);
Vector2 v = GetSplinePointLinear(arg0, arg1, arg2);
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM draw_spline_segment_bezier_cubic(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;

const ERL_NIF_TERM* tmp_arg3;
int arity3;
enif_get_tuple(env, argv[3], &arity3, &tmp_arg3);
double tmp_arg3_x;
enif_get_double(env, tmp_arg3[1], &tmp_arg3_x);
double tmp_arg3_y;
enif_get_double(env, tmp_arg3[2], &tmp_arg3_y);
Vector2 arg3;
arg3.x = (float)tmp_arg3_x;
arg3.y = (float)tmp_arg3_y;
double arg4;
enif_get_double(env, argv[4], &arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawSplineSegmentBezierCubic(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_spline_segment_bezier_quadratic(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
double arg3;
enif_get_double(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawSplineSegmentBezierQuadratic(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_spline_segment_catmull_rom(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;

const ERL_NIF_TERM* tmp_arg3;
int arity3;
enif_get_tuple(env, argv[3], &arity3, &tmp_arg3);
double tmp_arg3_x;
enif_get_double(env, tmp_arg3[1], &tmp_arg3_x);
double tmp_arg3_y;
enif_get_double(env, tmp_arg3[2], &tmp_arg3_y);
Vector2 arg3;
arg3.x = (float)tmp_arg3_x;
arg3.y = (float)tmp_arg3_y;
double arg4;
enif_get_double(env, argv[4], &arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawSplineSegmentCatmullRom(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_spline_segment_basis(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;

const ERL_NIF_TERM* tmp_arg3;
int arity3;
enif_get_tuple(env, argv[3], &arity3, &tmp_arg3);
double tmp_arg3_x;
enif_get_double(env, tmp_arg3[1], &tmp_arg3_x);
double tmp_arg3_y;
enif_get_double(env, tmp_arg3[2], &tmp_arg3_y);
Vector2 arg3;
arg3.x = (float)tmp_arg3_x;
arg3.y = (float)tmp_arg3_y;
double arg4;
enif_get_double(env, argv[4], &arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawSplineSegmentBasis(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_spline_segment_linear(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
double arg2;
enif_get_double(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawSplineSegmentLinear(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_poly_lines_ex(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
int arg1;
enif_get_int(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
double arg4;
enif_get_double(env, argv[4], &arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawPolyLinesEx(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_poly_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
int arg1;
enif_get_int(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawPolyLines(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_poly(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
int arg1;
enif_get_int(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawPoly(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_triangle_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawTriangleLines(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_triangle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;

const ERL_NIF_TERM* tmp_arg2;
int arity2;
enif_get_tuple(env, argv[2], &arity2, &tmp_arg2);
double tmp_arg2_x;
enif_get_double(env, tmp_arg2[1], &tmp_arg2_x);
double tmp_arg2_y;
enif_get_double(env, tmp_arg2[2], &tmp_arg2_y);
Vector2 arg2;
arg2.x = (float)tmp_arg2_x;
arg2.y = (float)tmp_arg2_y;
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawTriangle(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_rounded_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
double tmp_arg0_width;
enif_get_double(env, tmp_arg0[3], &tmp_arg0_width);
double tmp_arg0_height;
enif_get_double(env, tmp_arg0[4], &tmp_arg0_height);
Rectangle arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
arg0.width = (float)tmp_arg0_width;
arg0.height = (float)tmp_arg0_height;
double arg1;
enif_get_double(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawRectangleRoundedLines(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_rounded(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
double tmp_arg0_width;
enif_get_double(env, tmp_arg0[3], &tmp_arg0_width);
double tmp_arg0_height;
enif_get_double(env, tmp_arg0[4], &tmp_arg0_height);
Rectangle arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
arg0.width = (float)tmp_arg0_width;
arg0.height = (float)tmp_arg0_height;
double arg1;
enif_get_double(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawRectangleRounded(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_lines_ex(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
double tmp_arg0_width;
enif_get_double(env, tmp_arg0[3], &tmp_arg0_width);
double tmp_arg0_height;
enif_get_double(env, tmp_arg0[4], &tmp_arg0_height);
Rectangle arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
arg0.width = (float)tmp_arg0_width;
arg0.height = (float)tmp_arg0_height;
double arg1;
enif_get_double(env, argv[1], &arg1);
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
DrawRectangleLinesEx(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawRectangleLines(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_gradient_ex(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
double tmp_arg0_width;
enif_get_double(env, tmp_arg0[3], &tmp_arg0_width);
double tmp_arg0_height;
enif_get_double(env, tmp_arg0[4], &tmp_arg0_height);
Rectangle arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
arg0.width = (float)tmp_arg0_width;
arg0.height = (float)tmp_arg0_height;
unsigned int tmp_arg1;
enif_get_uint(env, argv[1], &tmp_arg1);
Color arg1 = GetColor(tmp_arg1);
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawRectangleGradientEx(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_gradient_h(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawRectangleGradientH(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_gradient_v(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawRectangleGradientV(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_pro(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
double tmp_arg0_width;
enif_get_double(env, tmp_arg0[3], &tmp_arg0_width);
double tmp_arg0_height;
enif_get_double(env, tmp_arg0[4], &tmp_arg0_height);
Rectangle arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
arg0.width = (float)tmp_arg0_width;
arg0.height = (float)tmp_arg0_height;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
double arg2;
enif_get_double(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawRectanglePro(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_rec(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
double tmp_arg0_width;
enif_get_double(env, tmp_arg0[3], &tmp_arg0_width);
double tmp_arg0_height;
enif_get_double(env, tmp_arg0[4], &tmp_arg0_height);
Rectangle arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
arg0.width = (float)tmp_arg0_width;
arg0.height = (float)tmp_arg0_height;
unsigned int tmp_arg1;
enif_get_uint(env, argv[1], &tmp_arg1);
Color arg1 = GetColor(tmp_arg1);
DrawRectangleRec(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle_v(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
DrawRectangleV(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_rectangle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawRectangle(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_ring_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
double arg4;
enif_get_double(env, argv[4], &arg4);
int arg5;
enif_get_int(env, argv[5], &arg5);
unsigned int tmp_arg6;
enif_get_uint(env, argv[6], &tmp_arg6);
Color arg6 = GetColor(tmp_arg6);
DrawRingLines(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_ring(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
double arg4;
enif_get_double(env, argv[4], &arg4);
int arg5;
enif_get_int(env, argv[5], &arg5);
unsigned int tmp_arg6;
enif_get_uint(env, argv[6], &tmp_arg6);
Color arg6 = GetColor(tmp_arg6);
DrawRing(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_ellipse_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawEllipseLines(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_ellipse(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawEllipse(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_circle_lines_v(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
double arg1;
enif_get_double(env, argv[1], &arg1);
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
DrawCircleLinesV(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_circle_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawCircleLines(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_circle_v(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
double arg1;
enif_get_double(env, argv[1], &arg1);
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
DrawCircleV(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_circle_gradient(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawCircleGradient(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_circle_sector_lines(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
int arg4;
enif_get_int(env, argv[4], &arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawCircleSectorLines(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_circle_sector(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
double arg1;
enif_get_double(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
double arg3;
enif_get_double(env, argv[3], &arg3);
int arg4;
enif_get_int(env, argv[4], &arg4);
unsigned int tmp_arg5;
enif_get_uint(env, argv[5], &tmp_arg5);
Color arg5 = GetColor(tmp_arg5);
DrawCircleSector(arg0, arg1, arg2, arg3, arg4, arg5);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_circle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
double arg2;
enif_get_double(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawCircle(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_line_bezier(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
double arg2;
enif_get_double(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawLineBezier(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_line_ex(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
double arg2;
enif_get_double(env, argv[2], &arg2);
unsigned int tmp_arg3;
enif_get_uint(env, argv[3], &tmp_arg3);
Color arg3 = GetColor(tmp_arg3);
DrawLineEx(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_line_v(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
Vector2 arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
DrawLineV(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_line(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
unsigned int tmp_arg4;
enif_get_uint(env, argv[4], &tmp_arg4);
Color arg4 = GetColor(tmp_arg4);
DrawLine(arg0, arg1, arg2, arg3, arg4);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_pixel_v(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
double tmp_arg0_x;
enif_get_double(env, tmp_arg0[1], &tmp_arg0_x);
double tmp_arg0_y;
enif_get_double(env, tmp_arg0[2], &tmp_arg0_y);
Vector2 arg0;
arg0.x = (float)tmp_arg0_x;
arg0.y = (float)tmp_arg0_y;
unsigned int tmp_arg1;
enif_get_uint(env, argv[1], &tmp_arg1);
Color arg1 = GetColor(tmp_arg1);
DrawPixelV(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM draw_pixel(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
unsigned int tmp_arg2;
enif_get_uint(env, argv[2], &tmp_arg2);
Color arg2 = GetColor(tmp_arg2);
DrawPixel(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_shapes_texture(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

const ERL_NIF_TERM* tmp_arg0;
int arity0;
enif_get_tuple(env, argv[0], &arity0, &tmp_arg0);
unsigned int tmp_arg0_id;
enif_get_uint(env, tmp_arg0[1], &tmp_arg0_id);
int tmp_arg0_width;
enif_get_int(env, tmp_arg0[2], &tmp_arg0_width);
int tmp_arg0_height;
enif_get_int(env, tmp_arg0[3], &tmp_arg0_height);
int tmp_arg0_mipmaps;
enif_get_int(env, tmp_arg0[4], &tmp_arg0_mipmaps);
int tmp_arg0_format;
enif_get_int(env, tmp_arg0[5], &tmp_arg0_format);
Texture2D arg0;
arg0.id = tmp_arg0_id;
arg0.width = tmp_arg0_width;
arg0.height = tmp_arg0_height;
arg0.mipmaps = tmp_arg0_mipmaps;
arg0.format = tmp_arg0_format;

const ERL_NIF_TERM* tmp_arg1;
int arity1;
enif_get_tuple(env, argv[1], &arity1, &tmp_arg1);
double tmp_arg1_x;
enif_get_double(env, tmp_arg1[1], &tmp_arg1_x);
double tmp_arg1_y;
enif_get_double(env, tmp_arg1[2], &tmp_arg1_y);
double tmp_arg1_width;
enif_get_double(env, tmp_arg1[3], &tmp_arg1_width);
double tmp_arg1_height;
enif_get_double(env, tmp_arg1[4], &tmp_arg1_height);
Rectangle arg1;
arg1.x = (float)tmp_arg1_x;
arg1.y = (float)tmp_arg1_y;
arg1.width = (float)tmp_arg1_width;
arg1.height = (float)tmp_arg1_height;
SetShapesTexture(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_gesture_pinch_angle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

float result = GetGesturePinchAngle();
return enif_make_double(env, (double)result);
}

static ERL_NIF_TERM get_gesture_pinch_vector(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

Vector2 v = GetGesturePinchVector();
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_gesture_drag_angle(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

float result = GetGestureDragAngle();
return enif_make_double(env, (double)result);
}

static ERL_NIF_TERM get_gesture_drag_vector(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

Vector2 v = GetGestureDragVector();
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_gesture_hold_duration(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

float result = GetGestureHoldDuration();
return enif_make_double(env, (double)result);
}

static ERL_NIF_TERM get_gesture_detected(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetGestureDetected();
return enif_make_int(env, result);
}

static ERL_NIF_TERM is_gesture_detected(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int result = IsGestureDetected(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM set_gestures_enabled(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
SetGesturesEnabled(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_touch_point_count(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetTouchPointCount();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_touch_point_id(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int result = GetTouchPointId(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_touch_position(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
Vector2 v = GetTouchPosition(arg0);
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_touch_y(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetTouchY();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_touch_x(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetTouchX();
return enif_make_int(env, result);
}

static ERL_NIF_TERM set_mouse_cursor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
SetMouseCursor(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_mouse_wheel_move_v(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

Vector2 v = GetMouseWheelMoveV();
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_mouse_wheel_move(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

float result = GetMouseWheelMove();
return enif_make_double(env, (double)result);
}

static ERL_NIF_TERM set_mouse_scale(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
double arg1;
enif_get_double(env, argv[1], &arg1);
SetMouseScale(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_mouse_offset(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
SetMouseOffset(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_mouse_position(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
SetMousePosition(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_mouse_delta(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

Vector2 v = GetMouseDelta();
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_mouse_position(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

Vector2 v = GetMousePosition();
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_mouse_y(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetMouseY();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_mouse_x(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetMouseX();
return enif_make_int(env, result);
}

static ERL_NIF_TERM is_mouse_button_up(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsMouseButtonUp(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_mouse_button_released(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsMouseButtonReleased(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_mouse_button_down(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsMouseButtonDown(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_mouse_button_pressed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsMouseButtonPressed(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM set_gamepad_mappings(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int result = SetGamepadMappings(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_gamepad_axis_movement(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
float result = GetGamepadAxisMovement(arg0, arg1);
return enif_make_double(env, (double)result);
}

static ERL_NIF_TERM get_gamepad_axis_count(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int result = GetGamepadAxisCount(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_gamepad_button_pressed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetGamepadButtonPressed();
return enif_make_int(env, result);
}

static ERL_NIF_TERM is_gamepad_button_up(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
unsigned int result = IsGamepadButtonUp(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_gamepad_button_released(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
unsigned int result = IsGamepadButtonReleased(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_gamepad_button_down(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
unsigned int result = IsGamepadButtonDown(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_gamepad_button_pressed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
unsigned int result = IsGamepadButtonPressed(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_gamepad_available(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsGamepadAvailable(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM set_exit_key(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
SetExitKey(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_char_pressed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetCharPressed();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_key_pressed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetKeyPressed();
return enif_make_int(env, result);
}

static ERL_NIF_TERM is_key_up(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsKeyUp(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_key_released(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsKeyReleased(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_key_down(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsKeyDown(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_key_pressed_repeat(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsKeyPressedRepeat(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_key_pressed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
unsigned int result = IsKeyPressed(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM stop_automation_event_recording(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

StopAutomationEventRecording();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM start_automation_event_recording(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

StartAutomationEventRecording();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_automation_event_base_frame(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
SetAutomationEventBaseFrame(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM is_file_dropped(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsFileDropped();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_path_file(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
unsigned int result = IsPathFile(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM change_directory(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
unsigned int result = ChangeDirectory(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM get_file_length(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
int result = GetFileLength(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM is_file_extension(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
char arg1[1024];
if (!enif_get_string(env, argv[1], arg1, sizeof(arg1), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
unsigned int result = IsFileExtension(arg0, arg1);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM directory_exists(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
unsigned int result = DirectoryExists(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM file_exists(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
unsigned int result = FileExists(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM set_trace_log_level(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
SetTraceLogLevel(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM open_url(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
OpenURL(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_config_flags(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
SetConfigFlags(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM take_screenshot(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
TakeScreenshot(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_random_value(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int result = GetRandomValue(arg0, arg1);
return enif_make_int(env, result);
}

static ERL_NIF_TERM set_random_seed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
SetRandomSeed(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM poll_input_events(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

PollInputEvents();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM swap_screen_buffer(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

SwapScreenBuffer();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_fps(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetFPS();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_frame_time(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

float result = GetFrameTime();
return enif_make_double(env, (double)result);
}

static ERL_NIF_TERM set_target_fps(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
SetTargetFPS(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM end_vr_stereo_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EndVrStereoMode();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM end_scissor_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EndScissorMode();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM begin_scissor_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
int arg2;
enif_get_int(env, argv[2], &arg2);
int arg3;
enif_get_int(env, argv[3], &arg3);
BeginScissorMode(arg0, arg1, arg2, arg3);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM end_blend_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EndBlendMode();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM begin_blend_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
BeginBlendMode(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM end_shader_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EndShaderMode();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM end_texture_mode(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EndTextureMode();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM end_mode3_d(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EndMode3D();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM end_mode2_d(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EndMode2D();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM end_drawing(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EndDrawing();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM begin_drawing(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

BeginDrawing();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM clear_background(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int tmp_arg0;
enif_get_uint(env, argv[0], &tmp_arg0);
Color arg0 = GetColor(tmp_arg0);
ClearBackground(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM is_cursor_on_screen(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsCursorOnScreen();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM disable_cursor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

DisableCursor();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM enable_cursor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EnableCursor();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM is_cursor_hidden(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsCursorHidden();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM hide_cursor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

HideCursor();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM show_cursor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

ShowCursor();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM disable_event_waiting(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

DisableEventWaiting();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM enable_event_waiting(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

EnableEventWaiting();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_clipboard_text(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
SetClipboardText(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM get_window_scale_dpi(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

Vector2 v = GetWindowScaleDPI();
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_window_position(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

Vector2 v = GetWindowPosition();
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_monitor_refresh_rate(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int result = GetMonitorRefreshRate(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_monitor_physical_height(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int result = GetMonitorPhysicalHeight(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_monitor_physical_width(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int result = GetMonitorPhysicalWidth(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_monitor_height(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int result = GetMonitorHeight(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_monitor_width(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int result = GetMonitorWidth(arg0);
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_monitor_position(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
Vector2 v = GetMonitorPosition(arg0);
return enif_make_tuple3(env, enif_make_double(env, 0), enif_make_double(env, (double)v.x), enif_make_double(env, (double)v.y));
}

static ERL_NIF_TERM get_current_monitor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetCurrentMonitor();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_monitor_count(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetMonitorCount();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_render_height(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetRenderHeight();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_render_width(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetRenderWidth();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_screen_height(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetScreenHeight();
return enif_make_int(env, result);
}

static ERL_NIF_TERM get_screen_width(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

int result = GetScreenWidth();
return enif_make_int(env, result);
}

static ERL_NIF_TERM set_window_focused(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

SetWindowFocused();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_window_opacity(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
double arg0;
enif_get_double(env, argv[0], &arg0);
SetWindowOpacity(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_window_size(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
SetWindowSize(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_window_max_size(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
SetWindowMaxSize(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_window_min_size(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
SetWindowMinSize(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_window_monitor(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
SetWindowMonitor(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_window_position(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
SetWindowPosition(arg0, arg1);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_window_title(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
char arg0[1024];
if (!enif_get_string(env, argv[0], arg0, sizeof(arg0), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
SetWindowTitle(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM restore_window(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

RestoreWindow();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM minimize_window(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

MinimizeWindow();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM maximize_window(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

MaximizeWindow();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM toggle_borderless_windowed(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

ToggleBorderlessWindowed();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM toggle_fullscreen(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

ToggleFullscreen();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM clear_window_state(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
ClearWindowState(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM set_window_state(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
SetWindowState(arg0);
return enif_make_int(env, 0);
}

static ERL_NIF_TERM is_window_state(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
unsigned int arg0;
enif_get_uint(env, argv[0], &arg0);
unsigned int result = IsWindowState(arg0);
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_window_resized(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsWindowResized();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_window_focused(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsWindowFocused();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_window_maximized(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsWindowMaximized();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_window_minimized(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsWindowMinimized();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_window_hidden(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsWindowHidden();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_window_fullscreen(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsWindowFullscreen();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM is_window_ready(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = IsWindowReady();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM window_should_close(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

unsigned int result = WindowShouldClose();
return enif_make_uint(env, result);
}

static ERL_NIF_TERM close_window(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {

CloseWindow();
return enif_make_int(env, 0);
}

static ERL_NIF_TERM init_window(ErlNifEnv *env, int argc, const ERL_NIF_TERM argv[]) {
int arg0;
enif_get_int(env, argv[0], &arg0);
int arg1;
enif_get_int(env, argv[1], &arg1);
char arg2[1024];
if (!enif_get_string(env, argv[2], arg2, sizeof(arg2), ERL_NIF_UTF8))
{
return enif_make_badarg(env);
}
InitWindow(arg0, arg1, arg2);
return enif_make_int(env, 0);
}

static ErlNifFunc nif_funcs[] =
{
{ "rl_load_draw_quad", 0, rl_load_draw_quad },
{ "rl_load_draw_cube", 0, rl_load_draw_cube },
{ "rl_bind_image_texture", 4, rl_bind_image_texture },
{ "rl_get_shader_buffer_size", 1, rl_get_shader_buffer_size },
{ "rl_copy_shader_buffer", 5, rl_copy_shader_buffer },
{ "rl_bind_shader_buffer", 2, rl_bind_shader_buffer },
{ "rl_unload_shader_buffer", 1, rl_unload_shader_buffer },
{ "rl_compute_shader_dispatch", 3, rl_compute_shader_dispatch },
{ "rl_load_compute_shader_program", 1, rl_load_compute_shader_program },
{ "rl_set_uniform_sampler", 2, rl_set_uniform_sampler },
{ "rl_get_location_attrib", 2, rl_get_location_attrib },
{ "rl_get_location_uniform", 2, rl_get_location_uniform },
{ "rl_unload_shader_program", 1, rl_unload_shader_program },
{ "rl_load_shader_program", 2, rl_load_shader_program },
{ "rl_compile_shader", 2, rl_compile_shader },
{ "rl_load_shader_code", 2, rl_load_shader_code },
{ "rl_unload_framebuffer", 1, rl_unload_framebuffer },
{ "rl_framebuffer_complete", 1, rl_framebuffer_complete },
{ "rl_framebuffer_attach", 5, rl_framebuffer_attach },
{ "rl_load_framebuffer", 2, rl_load_framebuffer },
{ "rl_unload_texture", 1, rl_unload_texture },
{ "rl_load_texture_depth", 3, rl_load_texture_depth },
{ "rl_draw_vertex_array_instanced", 3, rl_draw_vertex_array_instanced },
{ "rl_draw_vertex_array", 2, rl_draw_vertex_array },
{ "rl_set_vertex_attribute_divisor", 2, rl_set_vertex_attribute_divisor },
{ "rl_unload_vertex_buffer", 1, rl_unload_vertex_buffer },
{ "rl_unload_vertex_array", 1, rl_unload_vertex_array },
{ "rl_load_vertex_array", 0, rl_load_vertex_array },
{ "rl_set_texture", 1, rl_set_texture },
{ "rl_check_render_batch_limit", 1, rl_check_render_batch_limit },
{ "rl_draw_render_batch_active", 0, rl_draw_render_batch_active },
{ "rl_get_shader_id_default", 0, rl_get_shader_id_default },
{ "rl_get_texture_id_default", 0, rl_get_texture_id_default },
{ "rl_get_framebuffer_height", 0, rl_get_framebuffer_height },
{ "rl_set_framebuffer_height", 1, rl_set_framebuffer_height },
{ "rl_get_framebuffer_width", 0, rl_get_framebuffer_width },
{ "rl_set_framebuffer_width", 1, rl_set_framebuffer_width },
{ "rl_get_version", 0, rl_get_version },
{ "rlgl_close", 0, rlgl_close },
{ "rlgl_init", 2, rlgl_init },
{ "rl_set_blend_factors_separate", 6, rl_set_blend_factors_separate },
{ "rl_set_blend_factors", 3, rl_set_blend_factors },
{ "rl_set_blend_mode", 1, rl_set_blend_mode },
{ "rl_check_errors", 0, rl_check_errors },
{ "rl_clear_screen_buffers", 0, rl_clear_screen_buffers },
{ "rl_is_stereo_render_enabled", 0, rl_is_stereo_render_enabled },
{ "rl_disable_stereo_render", 0, rl_disable_stereo_render },
{ "rl_enable_stereo_render", 0, rl_enable_stereo_render },
{ "rl_disable_smooth_lines", 0, rl_disable_smooth_lines },
{ "rl_enable_smooth_lines", 0, rl_enable_smooth_lines },
{ "rl_get_line_width", 0, rl_get_line_width },
{ "rl_set_line_width", 1, rl_set_line_width },
{ "rl_disable_wire_mode", 0, rl_disable_wire_mode },
{ "rl_enable_point_mode", 0, rl_enable_point_mode },
{ "rl_enable_wire_mode", 0, rl_enable_wire_mode },
{ "rl_scissor", 4, rl_scissor },
{ "rl_disable_scissor_test", 0, rl_disable_scissor_test },
{ "rl_enable_scissor_test", 0, rl_enable_scissor_test },
{ "rl_set_cull_face", 1, rl_set_cull_face },
{ "rl_disable_backface_culling", 0, rl_disable_backface_culling },
{ "rl_enable_backface_culling", 0, rl_enable_backface_culling },
{ "rl_disable_depth_mask", 0, rl_disable_depth_mask },
{ "rl_enable_depth_mask", 0, rl_enable_depth_mask },
{ "rl_disable_depth_test", 0, rl_disable_depth_test },
{ "rl_enable_depth_test", 0, rl_enable_depth_test },
{ "rl_disable_color_blend", 0, rl_disable_color_blend },
{ "rl_enable_color_blend", 0, rl_enable_color_blend },
{ "rl_blit_framebuffer", 9, rl_blit_framebuffer },
{ "rl_active_draw_buffers", 1, rl_active_draw_buffers },
{ "rl_disable_framebuffer", 0, rl_disable_framebuffer },
{ "rl_enable_framebuffer", 1, rl_enable_framebuffer },
{ "rl_disable_shader", 0, rl_disable_shader },
{ "rl_enable_shader", 1, rl_enable_shader },
{ "rl_cubemap_parameters", 3, rl_cubemap_parameters },
{ "rl_texture_parameters", 3, rl_texture_parameters },
{ "rl_disable_texture_cubemap", 0, rl_disable_texture_cubemap },
{ "rl_enable_texture_cubemap", 1, rl_enable_texture_cubemap },
{ "rl_disable_texture", 0, rl_disable_texture },
{ "rl_enable_texture", 1, rl_enable_texture },
{ "rl_active_texture_slot", 1, rl_active_texture_slot },
{ "rl_disable_vertex_attribute", 1, rl_disable_vertex_attribute },
{ "rl_enable_vertex_attribute", 1, rl_enable_vertex_attribute },
{ "rl_disable_vertex_buffer_element", 0, rl_disable_vertex_buffer_element },
{ "rl_enable_vertex_buffer_element", 1, rl_enable_vertex_buffer_element },
{ "rl_disable_vertex_buffer", 0, rl_disable_vertex_buffer },
{ "rl_enable_vertex_buffer", 1, rl_enable_vertex_buffer },
{ "rl_disable_vertex_array", 0, rl_disable_vertex_array },
{ "rl_enable_vertex_array", 1, rl_enable_vertex_array },
{ "rl_color4f", 4, rl_color4f },
{ "rl_color3f", 3, rl_color3f },
{ "rl_normal3f", 3, rl_normal3f },
{ "rl_tex_coord2f", 2, rl_tex_coord2f },
{ "rl_vertex3f", 3, rl_vertex3f },
{ "rl_vertex2f", 2, rl_vertex2f },
{ "rl_vertex2i", 2, rl_vertex2i },
{ "rl_end", 0, rl_end },
{ "rl_begin", 1, rl_begin },
{ "rl_viewport", 4, rl_viewport },
{ "rl_scalef", 3, rl_scalef },
{ "rl_rotatef", 4, rl_rotatef },
{ "rl_translatef", 3, rl_translatef },
{ "rl_load_identity", 0, rl_load_identity },
{ "rl_pop_matrix", 0, rl_pop_matrix },
{ "rl_push_matrix", 0, rl_push_matrix },
{ "rl_matrix_mode", 1, rl_matrix_mode },
{ "set_audio_stream_buffer_size_default", 1, set_audio_stream_buffer_size_default },
{ "get_master_volume", 0, get_master_volume },
{ "set_master_volume", 1, set_master_volume },
{ "is_audio_device_ready", 0, is_audio_device_ready },
{ "close_audio_device", 0, close_audio_device },
{ "init_audio_device", 0, init_audio_device },
{ "draw_grid", 2, draw_grid },
{ "text_to_integer", 1, text_to_integer },
{ "text_find_index", 2, text_find_index },
{ "text_length", 1, text_length },
{ "text_is_equal", 2, text_is_equal },
{ "get_codepoint_count", 1, get_codepoint_count },
{ "measure_text", 2, measure_text },
{ "set_text_line_spacing", 1, set_text_line_spacing },
{ "draw_text", 5, draw_text },
{ "draw_fps", 2, draw_fps },
{ "get_pixel_data_size", 3, get_pixel_data_size },
{ "get_color", 1, get_color },
{ "color_alpha_blend", 3, color_alpha_blend },
{ "color_alpha", 2, color_alpha },
{ "color_contrast", 2, color_contrast },
{ "color_brightness", 2, color_brightness },
{ "color_tint", 2, color_tint },
{ "color_from_hsv", 3, color_from_hsv },
{ "color_to_int", 1, color_to_int },
{ "fade", 2, fade },
{ "draw_texture_pro", 6, draw_texture_pro },
{ "draw_texture_rec", 4, draw_texture_rec },
{ "draw_texture_ex", 5, draw_texture_ex },
{ "draw_texture_v", 3, draw_texture_v },
{ "draw_texture", 4, draw_texture },
{ "set_texture_wrap", 2, set_texture_wrap },
{ "set_texture_filter", 2, set_texture_filter },
{ "unload_texture", 1, unload_texture },
{ "is_texture_ready", 1, is_texture_ready },
{ "load_texture", 1, load_texture },
{ "check_collision_point_line", 4, check_collision_point_line },
{ "check_collision_point_triangle", 4, check_collision_point_triangle },
{ "check_collision_point_circle", 3, check_collision_point_circle },
{ "check_collision_point_rec", 2, check_collision_point_rec },
{ "check_collision_circle_rec", 3, check_collision_circle_rec },
{ "check_collision_circles", 4, check_collision_circles },
{ "check_collision_recs", 2, check_collision_recs },
{ "get_spline_point_bezier_cubic", 5, get_spline_point_bezier_cubic },
{ "get_spline_point_bezier_quad", 4, get_spline_point_bezier_quad },
{ "get_spline_point_catmull_rom", 5, get_spline_point_catmull_rom },
{ "get_spline_point_basis", 5, get_spline_point_basis },
{ "get_spline_point_linear", 3, get_spline_point_linear },
{ "draw_spline_segment_bezier_cubic", 6, draw_spline_segment_bezier_cubic },
{ "draw_spline_segment_bezier_quadratic", 5, draw_spline_segment_bezier_quadratic },
{ "draw_spline_segment_catmull_rom", 6, draw_spline_segment_catmull_rom },
{ "draw_spline_segment_basis", 6, draw_spline_segment_basis },
{ "draw_spline_segment_linear", 4, draw_spline_segment_linear },
{ "draw_poly_lines_ex", 6, draw_poly_lines_ex },
{ "draw_poly_lines", 5, draw_poly_lines },
{ "draw_poly", 5, draw_poly },
{ "draw_triangle_lines", 4, draw_triangle_lines },
{ "draw_triangle", 4, draw_triangle },
{ "draw_rectangle_rounded_lines", 5, draw_rectangle_rounded_lines },
{ "draw_rectangle_rounded", 4, draw_rectangle_rounded },
{ "draw_rectangle_lines_ex", 3, draw_rectangle_lines_ex },
{ "draw_rectangle_lines", 5, draw_rectangle_lines },
{ "draw_rectangle_gradient_ex", 5, draw_rectangle_gradient_ex },
{ "draw_rectangle_gradient_h", 6, draw_rectangle_gradient_h },
{ "draw_rectangle_gradient_v", 6, draw_rectangle_gradient_v },
{ "draw_rectangle_pro", 4, draw_rectangle_pro },
{ "draw_rectangle_rec", 2, draw_rectangle_rec },
{ "draw_rectangle_v", 3, draw_rectangle_v },
{ "draw_rectangle", 5, draw_rectangle },
{ "draw_ring_lines", 7, draw_ring_lines },
{ "draw_ring", 7, draw_ring },
{ "draw_ellipse_lines", 5, draw_ellipse_lines },
{ "draw_ellipse", 5, draw_ellipse },
{ "draw_circle_lines_v", 3, draw_circle_lines_v },
{ "draw_circle_lines", 4, draw_circle_lines },
{ "draw_circle_v", 3, draw_circle_v },
{ "draw_circle_gradient", 5, draw_circle_gradient },
{ "draw_circle_sector_lines", 6, draw_circle_sector_lines },
{ "draw_circle_sector", 6, draw_circle_sector },
{ "draw_circle", 4, draw_circle },
{ "draw_line_bezier", 4, draw_line_bezier },
{ "draw_line_ex", 4, draw_line_ex },
{ "draw_line_v", 3, draw_line_v },
{ "draw_line", 5, draw_line },
{ "draw_pixel_v", 2, draw_pixel_v },
{ "draw_pixel", 3, draw_pixel },
{ "set_shapes_texture", 2, set_shapes_texture },
{ "get_gesture_pinch_angle", 0, get_gesture_pinch_angle },
{ "get_gesture_pinch_vector", 0, get_gesture_pinch_vector },
{ "get_gesture_drag_angle", 0, get_gesture_drag_angle },
{ "get_gesture_drag_vector", 0, get_gesture_drag_vector },
{ "get_gesture_hold_duration", 0, get_gesture_hold_duration },
{ "get_gesture_detected", 0, get_gesture_detected },
{ "is_gesture_detected", 1, is_gesture_detected },
{ "set_gestures_enabled", 1, set_gestures_enabled },
{ "get_touch_point_count", 0, get_touch_point_count },
{ "get_touch_point_id", 1, get_touch_point_id },
{ "get_touch_position", 1, get_touch_position },
{ "get_touch_y", 0, get_touch_y },
{ "get_touch_x", 0, get_touch_x },
{ "set_mouse_cursor", 1, set_mouse_cursor },
{ "get_mouse_wheel_move_v", 0, get_mouse_wheel_move_v },
{ "get_mouse_wheel_move", 0, get_mouse_wheel_move },
{ "set_mouse_scale", 2, set_mouse_scale },
{ "set_mouse_offset", 2, set_mouse_offset },
{ "set_mouse_position", 2, set_mouse_position },
{ "get_mouse_delta", 0, get_mouse_delta },
{ "get_mouse_position", 0, get_mouse_position },
{ "get_mouse_y", 0, get_mouse_y },
{ "get_mouse_x", 0, get_mouse_x },
{ "is_mouse_button_up", 1, is_mouse_button_up },
{ "is_mouse_button_released", 1, is_mouse_button_released },
{ "is_mouse_button_down", 1, is_mouse_button_down },
{ "is_mouse_button_pressed", 1, is_mouse_button_pressed },
{ "set_gamepad_mappings", 1, set_gamepad_mappings },
{ "get_gamepad_axis_movement", 2, get_gamepad_axis_movement },
{ "get_gamepad_axis_count", 1, get_gamepad_axis_count },
{ "get_gamepad_button_pressed", 0, get_gamepad_button_pressed },
{ "is_gamepad_button_up", 2, is_gamepad_button_up },
{ "is_gamepad_button_released", 2, is_gamepad_button_released },
{ "is_gamepad_button_down", 2, is_gamepad_button_down },
{ "is_gamepad_button_pressed", 2, is_gamepad_button_pressed },
{ "is_gamepad_available", 1, is_gamepad_available },
{ "set_exit_key", 1, set_exit_key },
{ "get_char_pressed", 0, get_char_pressed },
{ "get_key_pressed", 0, get_key_pressed },
{ "is_key_up", 1, is_key_up },
{ "is_key_released", 1, is_key_released },
{ "is_key_down", 1, is_key_down },
{ "is_key_pressed_repeat", 1, is_key_pressed_repeat },
{ "is_key_pressed", 1, is_key_pressed },
{ "stop_automation_event_recording", 0, stop_automation_event_recording },
{ "start_automation_event_recording", 0, start_automation_event_recording },
{ "set_automation_event_base_frame", 1, set_automation_event_base_frame },
{ "is_file_dropped", 0, is_file_dropped },
{ "is_path_file", 1, is_path_file },
{ "change_directory", 1, change_directory },
{ "get_file_length", 1, get_file_length },
{ "is_file_extension", 2, is_file_extension },
{ "directory_exists", 1, directory_exists },
{ "file_exists", 1, file_exists },
{ "set_trace_log_level", 1, set_trace_log_level },
{ "open_url", 1, open_url },
{ "set_config_flags", 1, set_config_flags },
{ "take_screenshot", 1, take_screenshot },
{ "get_random_value", 2, get_random_value },
{ "set_random_seed", 1, set_random_seed },
{ "poll_input_events", 0, poll_input_events },
{ "swap_screen_buffer", 0, swap_screen_buffer },
{ "get_fps", 0, get_fps },
{ "get_frame_time", 0, get_frame_time },
{ "set_target_fps", 1, set_target_fps },
{ "end_vr_stereo_mode", 0, end_vr_stereo_mode },
{ "end_scissor_mode", 0, end_scissor_mode },
{ "begin_scissor_mode", 4, begin_scissor_mode },
{ "end_blend_mode", 0, end_blend_mode },
{ "begin_blend_mode", 1, begin_blend_mode },
{ "end_shader_mode", 0, end_shader_mode },
{ "end_texture_mode", 0, end_texture_mode },
{ "end_mode3_d", 0, end_mode3_d },
{ "end_mode2_d", 0, end_mode2_d },
{ "end_drawing", 0, end_drawing },
{ "begin_drawing", 0, begin_drawing },
{ "clear_background", 1, clear_background },
{ "is_cursor_on_screen", 0, is_cursor_on_screen },
{ "disable_cursor", 0, disable_cursor },
{ "enable_cursor", 0, enable_cursor },
{ "is_cursor_hidden", 0, is_cursor_hidden },
{ "hide_cursor", 0, hide_cursor },
{ "show_cursor", 0, show_cursor },
{ "disable_event_waiting", 0, disable_event_waiting },
{ "enable_event_waiting", 0, enable_event_waiting },
{ "set_clipboard_text", 1, set_clipboard_text },
{ "get_window_scale_dpi", 0, get_window_scale_dpi },
{ "get_window_position", 0, get_window_position },
{ "get_monitor_refresh_rate", 1, get_monitor_refresh_rate },
{ "get_monitor_physical_height", 1, get_monitor_physical_height },
{ "get_monitor_physical_width", 1, get_monitor_physical_width },
{ "get_monitor_height", 1, get_monitor_height },
{ "get_monitor_width", 1, get_monitor_width },
{ "get_monitor_position", 1, get_monitor_position },
{ "get_current_monitor", 0, get_current_monitor },
{ "get_monitor_count", 0, get_monitor_count },
{ "get_render_height", 0, get_render_height },
{ "get_render_width", 0, get_render_width },
{ "get_screen_height", 0, get_screen_height },
{ "get_screen_width", 0, get_screen_width },
{ "set_window_focused", 0, set_window_focused },
{ "set_window_opacity", 1, set_window_opacity },
{ "set_window_size", 2, set_window_size },
{ "set_window_max_size", 2, set_window_max_size },
{ "set_window_min_size", 2, set_window_min_size },
{ "set_window_monitor", 1, set_window_monitor },
{ "set_window_position", 2, set_window_position },
{ "set_window_title", 1, set_window_title },
{ "restore_window", 0, restore_window },
{ "minimize_window", 0, minimize_window },
{ "maximize_window", 0, maximize_window },
{ "toggle_borderless_windowed", 0, toggle_borderless_windowed },
{ "toggle_fullscreen", 0, toggle_fullscreen },
{ "clear_window_state", 1, clear_window_state },
{ "set_window_state", 1, set_window_state },
{ "is_window_state", 1, is_window_state },
{ "is_window_resized", 0, is_window_resized },
{ "is_window_focused", 0, is_window_focused },
{ "is_window_maximized", 0, is_window_maximized },
{ "is_window_minimized", 0, is_window_minimized },
{ "is_window_hidden", 0, is_window_hidden },
{ "is_window_fullscreen", 0, is_window_fullscreen },
{ "is_window_ready", 0, is_window_ready },
{ "window_should_close", 0, window_should_close },
{ "close_window", 0, close_window },
{ "init_window", 3, init_window }
};

ERL_NIF_INIT(raylib_ffi, nif_funcs, NULL, NULL, NULL, NULL)

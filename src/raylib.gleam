
//
// File generated by generate_bindings.gleam.
//

import gleam/erlang/charlist

pub type Vector2 {
  Vector2(x: Float, y: Float)
}

pub type Rectangle {
  Rectangle(x: Float, y: Float, width: Float, height: Float)
}

pub type Texture2D {
  Texture2D(id: Int, width: Int, height: Int, mipmaps: Int, format: Int)
}

pub type Color = Int

@external(erlang, "raylib_ffi", "rl_load_draw_quad")
pub fn rl_load_draw_quad() -> Nil

@external(erlang, "raylib_ffi", "rl_load_draw_cube")
pub fn rl_load_draw_cube() -> Nil

@external(erlang, "raylib_ffi", "rl_bind_image_texture")
pub fn rl_bind_image_texture(id: Int, index: Int, format: Int, readonly: Bool) -> Nil

@external(erlang, "raylib_ffi", "rl_get_shader_buffer_size")
pub fn rl_get_shader_buffer_size(id: Int) -> Int

@external(erlang, "raylib_ffi", "rl_copy_shader_buffer")
pub fn rl_copy_shader_buffer(dest_id: Int, src_id: Int, dest_offset: Int, src_offset: Int, count: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_bind_shader_buffer")
pub fn rl_bind_shader_buffer(id: Int, index: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_unload_shader_buffer")
pub fn rl_unload_shader_buffer(ssbo_id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_compute_shader_dispatch")
pub fn rl_compute_shader_dispatch(group_x: Int, group_y: Int, group_z: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_load_compute_shader_program")
pub fn rl_load_compute_shader_program(shader_id: Int) -> Int

@external(erlang, "raylib_ffi", "rl_set_uniform_sampler")
pub fn rl_set_uniform_sampler(loc_index: Int, texture_id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_get_location_attrib")
pub fn rl_get_location_attrib(shader_id: Int, attrib_name: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "rl_get_location_uniform")
pub fn rl_get_location_uniform(shader_id: Int, uniform_name: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "rl_unload_shader_program")
pub fn rl_unload_shader_program(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_load_shader_program")
pub fn rl_load_shader_program(v_shader_id: Int, f_shader_id: Int) -> Int

@external(erlang, "raylib_ffi", "rl_compile_shader")
pub fn rl_compile_shader(shader_code: charlist.Charlist, a_type: Int) -> Int

@external(erlang, "raylib_ffi", "rl_load_shader_code")
pub fn rl_load_shader_code(vs_code: charlist.Charlist, fs_code: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "rl_unload_framebuffer")
pub fn rl_unload_framebuffer(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_framebuffer_complete")
pub fn rl_framebuffer_complete(id: Int) -> Int

@external(erlang, "raylib_ffi", "rl_framebuffer_attach")
pub fn rl_framebuffer_attach(fbo_id: Int, tex_id: Int, attach_type: Int, tex_type: Int, mip_level: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_load_framebuffer")
pub fn rl_load_framebuffer(width: Int, height: Int) -> Int

@external(erlang, "raylib_ffi", "rl_unload_texture")
pub fn rl_unload_texture(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_load_texture_depth")
pub fn rl_load_texture_depth(width: Int, height: Int, use_render_buffer: Bool) -> Int

@external(erlang, "raylib_ffi", "rl_draw_vertex_array_instanced")
pub fn rl_draw_vertex_array_instanced(offset: Int, count: Int, instances: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_draw_vertex_array")
pub fn rl_draw_vertex_array(offset: Int, count: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_set_vertex_attribute_divisor")
pub fn rl_set_vertex_attribute_divisor(index: Int, divisor: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_unload_vertex_buffer")
pub fn rl_unload_vertex_buffer(vbo_id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_unload_vertex_array")
pub fn rl_unload_vertex_array(vao_id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_load_vertex_array")
pub fn rl_load_vertex_array() -> Int

@external(erlang, "raylib_ffi", "rl_set_texture")
pub fn rl_set_texture(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_check_render_batch_limit")
pub fn rl_check_render_batch_limit(v_count: Int) -> Int

@external(erlang, "raylib_ffi", "rl_draw_render_batch_active")
pub fn rl_draw_render_batch_active() -> Nil

@external(erlang, "raylib_ffi", "rl_get_shader_id_default")
pub fn rl_get_shader_id_default() -> Int

@external(erlang, "raylib_ffi", "rl_get_texture_id_default")
pub fn rl_get_texture_id_default() -> Int

@external(erlang, "raylib_ffi", "rl_get_framebuffer_height")
pub fn rl_get_framebuffer_height() -> Int

@external(erlang, "raylib_ffi", "rl_set_framebuffer_height")
pub fn rl_set_framebuffer_height(height: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_get_framebuffer_width")
pub fn rl_get_framebuffer_width() -> Int

@external(erlang, "raylib_ffi", "rl_set_framebuffer_width")
pub fn rl_set_framebuffer_width(width: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_get_version")
pub fn rl_get_version() -> Int

@external(erlang, "raylib_ffi", "rlgl_close")
pub fn rlgl_close() -> Nil

@external(erlang, "raylib_ffi", "rlgl_init")
pub fn rlgl_init(width: Int, height: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_set_blend_factors_separate")
pub fn rl_set_blend_factors_separate(gl_src_rgb: Int, gl_dst_rgb: Int, gl_src_alpha: Int, gl_dst_alpha: Int, gl_eq_rgb: Int, gl_eq_alpha: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_set_blend_factors")
pub fn rl_set_blend_factors(gl_src_factor: Int, gl_dst_factor: Int, gl_equation: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_set_blend_mode")
pub fn rl_set_blend_mode(mode: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_check_errors")
pub fn rl_check_errors() -> Nil

@external(erlang, "raylib_ffi", "rl_clear_screen_buffers")
pub fn rl_clear_screen_buffers() -> Nil

@external(erlang, "raylib_ffi", "rl_is_stereo_render_enabled")
pub fn rl_is_stereo_render_enabled() -> Int

@external(erlang, "raylib_ffi", "rl_disable_stereo_render")
pub fn rl_disable_stereo_render() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_stereo_render")
pub fn rl_enable_stereo_render() -> Nil

@external(erlang, "raylib_ffi", "rl_disable_smooth_lines")
pub fn rl_disable_smooth_lines() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_smooth_lines")
pub fn rl_enable_smooth_lines() -> Nil

@external(erlang, "raylib_ffi", "rl_get_line_width")
pub fn rl_get_line_width() -> Float

@external(erlang, "raylib_ffi", "rl_set_line_width")
pub fn rl_set_line_width(width: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_wire_mode")
pub fn rl_disable_wire_mode() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_point_mode")
pub fn rl_enable_point_mode() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_wire_mode")
pub fn rl_enable_wire_mode() -> Nil

@external(erlang, "raylib_ffi", "rl_scissor")
pub fn rl_scissor(x: Int, y: Int, width: Int, height: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_scissor_test")
pub fn rl_disable_scissor_test() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_scissor_test")
pub fn rl_enable_scissor_test() -> Nil

@external(erlang, "raylib_ffi", "rl_set_cull_face")
pub fn rl_set_cull_face(mode: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_backface_culling")
pub fn rl_disable_backface_culling() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_backface_culling")
pub fn rl_enable_backface_culling() -> Nil

@external(erlang, "raylib_ffi", "rl_disable_depth_mask")
pub fn rl_disable_depth_mask() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_depth_mask")
pub fn rl_enable_depth_mask() -> Nil

@external(erlang, "raylib_ffi", "rl_disable_depth_test")
pub fn rl_disable_depth_test() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_depth_test")
pub fn rl_enable_depth_test() -> Nil

@external(erlang, "raylib_ffi", "rl_disable_color_blend")
pub fn rl_disable_color_blend() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_color_blend")
pub fn rl_enable_color_blend() -> Nil

@external(erlang, "raylib_ffi", "rl_blit_framebuffer")
pub fn rl_blit_framebuffer(src_x: Int, src_y: Int, src_width: Int, src_height: Int, dst_x: Int, dst_y: Int, dst_width: Int, dst_height: Int, buffer_mask: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_active_draw_buffers")
pub fn rl_active_draw_buffers(count: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_framebuffer")
pub fn rl_disable_framebuffer() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_framebuffer")
pub fn rl_enable_framebuffer(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_shader")
pub fn rl_disable_shader() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_shader")
pub fn rl_enable_shader(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_cubemap_parameters")
pub fn rl_cubemap_parameters(id: Int, param: Int, value: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_texture_parameters")
pub fn rl_texture_parameters(id: Int, param: Int, value: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_texture_cubemap")
pub fn rl_disable_texture_cubemap() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_texture_cubemap")
pub fn rl_enable_texture_cubemap(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_texture")
pub fn rl_disable_texture() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_texture")
pub fn rl_enable_texture(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_active_texture_slot")
pub fn rl_active_texture_slot(slot: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_vertex_attribute")
pub fn rl_disable_vertex_attribute(index: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_enable_vertex_attribute")
pub fn rl_enable_vertex_attribute(index: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_vertex_buffer_element")
pub fn rl_disable_vertex_buffer_element() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_vertex_buffer_element")
pub fn rl_enable_vertex_buffer_element(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_vertex_buffer")
pub fn rl_disable_vertex_buffer() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_vertex_buffer")
pub fn rl_enable_vertex_buffer(id: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_disable_vertex_array")
pub fn rl_disable_vertex_array() -> Nil

@external(erlang, "raylib_ffi", "rl_enable_vertex_array")
pub fn rl_enable_vertex_array(vao_id: Int) -> Int

@external(erlang, "raylib_ffi", "rl_color4f")
pub fn rl_color4f(x: Float, y: Float, z: Float, w: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_color3f")
pub fn rl_color3f(x: Float, y: Float, z: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_normal3f")
pub fn rl_normal3f(x: Float, y: Float, z: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_tex_coord2f")
pub fn rl_tex_coord2f(x: Float, y: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_vertex3f")
pub fn rl_vertex3f(x: Float, y: Float, z: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_vertex2f")
pub fn rl_vertex2f(x: Float, y: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_vertex2i")
pub fn rl_vertex2i(x: Int, y: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_end")
pub fn rl_end() -> Nil

@external(erlang, "raylib_ffi", "rl_begin")
pub fn rl_begin(mode: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_viewport")
pub fn rl_viewport(x: Int, y: Int, width: Int, height: Int) -> Nil

@external(erlang, "raylib_ffi", "rl_scalef")
pub fn rl_scalef(x: Float, y: Float, z: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_rotatef")
pub fn rl_rotatef(angle: Float, x: Float, y: Float, z: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_translatef")
pub fn rl_translatef(x: Float, y: Float, z: Float) -> Nil

@external(erlang, "raylib_ffi", "rl_load_identity")
pub fn rl_load_identity() -> Nil

@external(erlang, "raylib_ffi", "rl_pop_matrix")
pub fn rl_pop_matrix() -> Nil

@external(erlang, "raylib_ffi", "rl_push_matrix")
pub fn rl_push_matrix() -> Nil

@external(erlang, "raylib_ffi", "rl_matrix_mode")
pub fn rl_matrix_mode(mode: Int) -> Nil

@external(erlang, "raylib_ffi", "set_audio_stream_buffer_size_default")
pub fn set_audio_stream_buffer_size_default(size: Int) -> Nil

@external(erlang, "raylib_ffi", "get_master_volume")
pub fn get_master_volume() -> Float

@external(erlang, "raylib_ffi", "set_master_volume")
pub fn set_master_volume(volume: Float) -> Nil

@external(erlang, "raylib_ffi", "is_audio_device_ready")
pub fn is_audio_device_ready() -> Int

@external(erlang, "raylib_ffi", "close_audio_device")
pub fn close_audio_device() -> Nil

@external(erlang, "raylib_ffi", "init_audio_device")
pub fn init_audio_device() -> Nil

@external(erlang, "raylib_ffi", "draw_grid")
pub fn draw_grid(slices: Int, spacing: Float) -> Nil

@external(erlang, "raylib_ffi", "text_to_integer")
pub fn text_to_integer(text: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "text_find_index")
pub fn text_find_index(text: charlist.Charlist, find: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "text_length")
pub fn text_length(text: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "text_is_equal")
pub fn text_is_equal(text1: charlist.Charlist, text2: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "get_codepoint_count")
pub fn get_codepoint_count(text: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "measure_text")
pub fn measure_text(text: charlist.Charlist, font_size: Int) -> Int

@external(erlang, "raylib_ffi", "set_text_line_spacing")
pub fn set_text_line_spacing(spacing: Int) -> Nil

@external(erlang, "raylib_ffi", "draw_text")
pub fn draw_text(text: charlist.Charlist, pos_x: Int, pos_y: Int, font_size: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_fps")
pub fn draw_fps(pos_x: Int, pos_y: Int) -> Nil

@external(erlang, "raylib_ffi", "get_pixel_data_size")
pub fn get_pixel_data_size(width: Int, height: Int, format: Int) -> Int

@external(erlang, "raylib_ffi", "get_color")
pub fn get_color(hex_value: Int) -> Color

@external(erlang, "raylib_ffi", "color_alpha_blend")
pub fn color_alpha_blend(dst: Color, src: Color, tint: Color) -> Color

@external(erlang, "raylib_ffi", "color_alpha")
pub fn color_alpha(color: Color, alpha: Float) -> Color

@external(erlang, "raylib_ffi", "color_contrast")
pub fn color_contrast(color: Color, contrast: Float) -> Color

@external(erlang, "raylib_ffi", "color_brightness")
pub fn color_brightness(color: Color, factor: Float) -> Color

@external(erlang, "raylib_ffi", "color_tint")
pub fn color_tint(color: Color, tint: Color) -> Color

@external(erlang, "raylib_ffi", "color_from_hsv")
pub fn color_from_hsv(hue: Float, saturation: Float, value: Float) -> Color

@external(erlang, "raylib_ffi", "color_to_int")
pub fn color_to_int(color: Color) -> Int

@external(erlang, "raylib_ffi", "fade")
pub fn fade(color: Color, alpha: Float) -> Color

@external(erlang, "raylib_ffi", "draw_texture_pro")
pub fn draw_texture_pro(texture: Texture2D, source: Rectangle, dest: Rectangle, origin: Vector2, rotation: Float, tint: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_texture_rec")
pub fn draw_texture_rec(texture: Texture2D, source: Rectangle, position: Vector2, tint: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_texture_ex")
pub fn draw_texture_ex(texture: Texture2D, position: Vector2, rotation: Float, scale: Float, tint: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_texture_v")
pub fn draw_texture_v(texture: Texture2D, position: Vector2, tint: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_texture")
pub fn draw_texture(texture: Texture2D, pos_x: Int, pos_y: Int, tint: Color) -> Nil

@external(erlang, "raylib_ffi", "set_texture_wrap")
pub fn set_texture_wrap(texture: Texture2D, wrap: Int) -> Nil

@external(erlang, "raylib_ffi", "set_texture_filter")
pub fn set_texture_filter(texture: Texture2D, filter: Int) -> Nil

@external(erlang, "raylib_ffi", "unload_texture")
pub fn unload_texture(texture: Texture2D) -> Nil

@external(erlang, "raylib_ffi", "is_texture_ready")
pub fn is_texture_ready(texture: Texture2D) -> Int

@external(erlang, "raylib_ffi", "load_texture")
pub fn load_texture(file_name: charlist.Charlist) -> Texture2D

@external(erlang, "raylib_ffi", "check_collision_point_line")
pub fn check_collision_point_line(point: Vector2, p1: Vector2, p2: Vector2, threshold: Int) -> Int

@external(erlang, "raylib_ffi", "check_collision_point_triangle")
pub fn check_collision_point_triangle(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2) -> Int

@external(erlang, "raylib_ffi", "check_collision_point_circle")
pub fn check_collision_point_circle(point: Vector2, center: Vector2, radius: Float) -> Int

@external(erlang, "raylib_ffi", "check_collision_point_rec")
pub fn check_collision_point_rec(point: Vector2, rec: Rectangle) -> Int

@external(erlang, "raylib_ffi", "check_collision_circle_rec")
pub fn check_collision_circle_rec(center: Vector2, radius: Float, rec: Rectangle) -> Int

@external(erlang, "raylib_ffi", "check_collision_circles")
pub fn check_collision_circles(center1: Vector2, radius1: Float, center2: Vector2, radius2: Float) -> Int

@external(erlang, "raylib_ffi", "check_collision_recs")
pub fn check_collision_recs(rec1: Rectangle, rec2: Rectangle) -> Int

@external(erlang, "raylib_ffi", "get_spline_point_bezier_cubic")
pub fn get_spline_point_bezier_cubic(p1: Vector2, c2: Vector2, c3: Vector2, p4: Vector2, t: Float) -> Vector2

@external(erlang, "raylib_ffi", "get_spline_point_bezier_quad")
pub fn get_spline_point_bezier_quad(p1: Vector2, c2: Vector2, p3: Vector2, t: Float) -> Vector2

@external(erlang, "raylib_ffi", "get_spline_point_catmull_rom")
pub fn get_spline_point_catmull_rom(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, t: Float) -> Vector2

@external(erlang, "raylib_ffi", "get_spline_point_basis")
pub fn get_spline_point_basis(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, t: Float) -> Vector2

@external(erlang, "raylib_ffi", "get_spline_point_linear")
pub fn get_spline_point_linear(start_pos: Vector2, end_pos: Vector2, t: Float) -> Vector2

@external(erlang, "raylib_ffi", "draw_spline_segment_bezier_cubic")
pub fn draw_spline_segment_bezier_cubic(p1: Vector2, c2: Vector2, c3: Vector2, p4: Vector2, thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_spline_segment_bezier_quadratic")
pub fn draw_spline_segment_bezier_quadratic(p1: Vector2, c2: Vector2, p3: Vector2, thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_spline_segment_catmull_rom")
pub fn draw_spline_segment_catmull_rom(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_spline_segment_basis")
pub fn draw_spline_segment_basis(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_spline_segment_linear")
pub fn draw_spline_segment_linear(p1: Vector2, p2: Vector2, thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_poly_lines_ex")
pub fn draw_poly_lines_ex(center: Vector2, sides: Int, radius: Float, rotation: Float, line_thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_poly_lines")
pub fn draw_poly_lines(center: Vector2, sides: Int, radius: Float, rotation: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_poly")
pub fn draw_poly(center: Vector2, sides: Int, radius: Float, rotation: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_triangle_lines")
pub fn draw_triangle_lines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_triangle")
pub fn draw_triangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_rounded_lines")
pub fn draw_rectangle_rounded_lines(rec: Rectangle, roundness: Float, segments: Int, line_thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_rounded")
pub fn draw_rectangle_rounded(rec: Rectangle, roundness: Float, segments: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_lines_ex")
pub fn draw_rectangle_lines_ex(rec: Rectangle, line_thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_lines")
pub fn draw_rectangle_lines(pos_x: Int, pos_y: Int, width: Int, height: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_gradient_ex")
pub fn draw_rectangle_gradient_ex(rec: Rectangle, col1: Color, col2: Color, col3: Color, col4: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_gradient_h")
pub fn draw_rectangle_gradient_h(pos_x: Int, pos_y: Int, width: Int, height: Int, color1: Color, color2: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_gradient_v")
pub fn draw_rectangle_gradient_v(pos_x: Int, pos_y: Int, width: Int, height: Int, color1: Color, color2: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_pro")
pub fn draw_rectangle_pro(rec: Rectangle, origin: Vector2, rotation: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_rec")
pub fn draw_rectangle_rec(rec: Rectangle, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle_v")
pub fn draw_rectangle_v(position: Vector2, size: Vector2, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_rectangle")
pub fn draw_rectangle(pos_x: Int, pos_y: Int, width: Int, height: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_ring_lines")
pub fn draw_ring_lines(center: Vector2, inner_radius: Float, outer_radius: Float, start_angle: Float, end_angle: Float, segments: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_ring")
pub fn draw_ring(center: Vector2, inner_radius: Float, outer_radius: Float, start_angle: Float, end_angle: Float, segments: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_ellipse_lines")
pub fn draw_ellipse_lines(center_x: Int, center_y: Int, radius_h: Float, radius_v: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_ellipse")
pub fn draw_ellipse(center_x: Int, center_y: Int, radius_h: Float, radius_v: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_circle_lines_v")
pub fn draw_circle_lines_v(center: Vector2, radius: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_circle_lines")
pub fn draw_circle_lines(center_x: Int, center_y: Int, radius: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_circle_v")
pub fn draw_circle_v(center: Vector2, radius: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_circle_gradient")
pub fn draw_circle_gradient(center_x: Int, center_y: Int, radius: Float, color1: Color, color2: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_circle_sector_lines")
pub fn draw_circle_sector_lines(center: Vector2, radius: Float, start_angle: Float, end_angle: Float, segments: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_circle_sector")
pub fn draw_circle_sector(center: Vector2, radius: Float, start_angle: Float, end_angle: Float, segments: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_circle")
pub fn draw_circle(center_x: Int, center_y: Int, radius: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_line_bezier")
pub fn draw_line_bezier(start_pos: Vector2, end_pos: Vector2, thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_line_ex")
pub fn draw_line_ex(start_pos: Vector2, end_pos: Vector2, thick: Float, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_line_v")
pub fn draw_line_v(start_pos: Vector2, end_pos: Vector2, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_line")
pub fn draw_line(start_pos_x: Int, start_pos_y: Int, end_pos_x: Int, end_pos_y: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_pixel_v")
pub fn draw_pixel_v(position: Vector2, color: Color) -> Nil

@external(erlang, "raylib_ffi", "draw_pixel")
pub fn draw_pixel(pos_x: Int, pos_y: Int, color: Color) -> Nil

@external(erlang, "raylib_ffi", "set_shapes_texture")
pub fn set_shapes_texture(texture: Texture2D, source: Rectangle) -> Nil

@external(erlang, "raylib_ffi", "get_gesture_pinch_angle")
pub fn get_gesture_pinch_angle() -> Float

@external(erlang, "raylib_ffi", "get_gesture_pinch_vector")
pub fn get_gesture_pinch_vector() -> Vector2

@external(erlang, "raylib_ffi", "get_gesture_drag_angle")
pub fn get_gesture_drag_angle() -> Float

@external(erlang, "raylib_ffi", "get_gesture_drag_vector")
pub fn get_gesture_drag_vector() -> Vector2

@external(erlang, "raylib_ffi", "get_gesture_hold_duration")
pub fn get_gesture_hold_duration() -> Float

@external(erlang, "raylib_ffi", "get_gesture_detected")
pub fn get_gesture_detected() -> Int

@external(erlang, "raylib_ffi", "is_gesture_detected")
pub fn is_gesture_detected(gesture: Int) -> Int

@external(erlang, "raylib_ffi", "set_gestures_enabled")
pub fn set_gestures_enabled(flags: Int) -> Nil

@external(erlang, "raylib_ffi", "get_touch_point_count")
pub fn get_touch_point_count() -> Int

@external(erlang, "raylib_ffi", "get_touch_point_id")
pub fn get_touch_point_id(index: Int) -> Int

@external(erlang, "raylib_ffi", "get_touch_position")
pub fn get_touch_position(index: Int) -> Vector2

@external(erlang, "raylib_ffi", "get_touch_y")
pub fn get_touch_y() -> Int

@external(erlang, "raylib_ffi", "get_touch_x")
pub fn get_touch_x() -> Int

@external(erlang, "raylib_ffi", "set_mouse_cursor")
pub fn set_mouse_cursor(cursor: Int) -> Nil

@external(erlang, "raylib_ffi", "get_mouse_wheel_move_v")
pub fn get_mouse_wheel_move_v() -> Vector2

@external(erlang, "raylib_ffi", "get_mouse_wheel_move")
pub fn get_mouse_wheel_move() -> Float

@external(erlang, "raylib_ffi", "set_mouse_scale")
pub fn set_mouse_scale(scale_x: Float, scale_y: Float) -> Nil

@external(erlang, "raylib_ffi", "set_mouse_offset")
pub fn set_mouse_offset(offset_x: Int, offset_y: Int) -> Nil

@external(erlang, "raylib_ffi", "set_mouse_position")
pub fn set_mouse_position(x: Int, y: Int) -> Nil

@external(erlang, "raylib_ffi", "get_mouse_delta")
pub fn get_mouse_delta() -> Vector2

@external(erlang, "raylib_ffi", "get_mouse_position")
pub fn get_mouse_position() -> Vector2

@external(erlang, "raylib_ffi", "get_mouse_y")
pub fn get_mouse_y() -> Int

@external(erlang, "raylib_ffi", "get_mouse_x")
pub fn get_mouse_x() -> Int

@external(erlang, "raylib_ffi", "is_mouse_button_up")
pub fn is_mouse_button_up(button: Int) -> Int

@external(erlang, "raylib_ffi", "is_mouse_button_released")
pub fn is_mouse_button_released(button: Int) -> Int

@external(erlang, "raylib_ffi", "is_mouse_button_down")
pub fn is_mouse_button_down(button: Int) -> Int

@external(erlang, "raylib_ffi", "is_mouse_button_pressed")
pub fn is_mouse_button_pressed(button: Int) -> Int

@external(erlang, "raylib_ffi", "set_gamepad_mappings")
pub fn set_gamepad_mappings(mappings: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "get_gamepad_axis_movement")
pub fn get_gamepad_axis_movement(gamepad: Int, axis: Int) -> Float

@external(erlang, "raylib_ffi", "get_gamepad_axis_count")
pub fn get_gamepad_axis_count(gamepad: Int) -> Int

@external(erlang, "raylib_ffi", "get_gamepad_button_pressed")
pub fn get_gamepad_button_pressed() -> Int

@external(erlang, "raylib_ffi", "is_gamepad_button_up")
pub fn is_gamepad_button_up(gamepad: Int, button: Int) -> Int

@external(erlang, "raylib_ffi", "is_gamepad_button_released")
pub fn is_gamepad_button_released(gamepad: Int, button: Int) -> Int

@external(erlang, "raylib_ffi", "is_gamepad_button_down")
pub fn is_gamepad_button_down(gamepad: Int, button: Int) -> Int

@external(erlang, "raylib_ffi", "is_gamepad_button_pressed")
pub fn is_gamepad_button_pressed(gamepad: Int, button: Int) -> Int

@external(erlang, "raylib_ffi", "is_gamepad_available")
pub fn is_gamepad_available(gamepad: Int) -> Int

@external(erlang, "raylib_ffi", "set_exit_key")
pub fn set_exit_key(key: Int) -> Nil

@external(erlang, "raylib_ffi", "get_char_pressed")
pub fn get_char_pressed() -> Int

@external(erlang, "raylib_ffi", "get_key_pressed")
pub fn get_key_pressed() -> Int

@external(erlang, "raylib_ffi", "is_key_up")
pub fn is_key_up(key: Int) -> Int

@external(erlang, "raylib_ffi", "is_key_released")
pub fn is_key_released(key: Int) -> Int

@external(erlang, "raylib_ffi", "is_key_down")
pub fn is_key_down(key: Int) -> Int

@external(erlang, "raylib_ffi", "is_key_pressed_repeat")
pub fn is_key_pressed_repeat(key: Int) -> Int

@external(erlang, "raylib_ffi", "is_key_pressed")
pub fn is_key_pressed(key: Int) -> Int

@external(erlang, "raylib_ffi", "stop_automation_event_recording")
pub fn stop_automation_event_recording() -> Nil

@external(erlang, "raylib_ffi", "start_automation_event_recording")
pub fn start_automation_event_recording() -> Nil

@external(erlang, "raylib_ffi", "set_automation_event_base_frame")
pub fn set_automation_event_base_frame(frame: Int) -> Nil

@external(erlang, "raylib_ffi", "is_file_dropped")
pub fn is_file_dropped() -> Int

@external(erlang, "raylib_ffi", "is_path_file")
pub fn is_path_file(path: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "change_directory")
pub fn change_directory(dir: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "get_file_length")
pub fn get_file_length(file_name: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "is_file_extension")
pub fn is_file_extension(file_name: charlist.Charlist, ext: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "directory_exists")
pub fn directory_exists(dir_path: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "file_exists")
pub fn file_exists(file_name: charlist.Charlist) -> Int

@external(erlang, "raylib_ffi", "set_trace_log_level")
pub fn set_trace_log_level(log_level: Int) -> Nil

@external(erlang, "raylib_ffi", "open_url")
pub fn open_url(url: charlist.Charlist) -> Nil

@external(erlang, "raylib_ffi", "set_config_flags")
pub fn set_config_flags(flags: Int) -> Nil

@external(erlang, "raylib_ffi", "take_screenshot")
pub fn take_screenshot(file_name: charlist.Charlist) -> Nil

@external(erlang, "raylib_ffi", "get_random_value")
pub fn get_random_value(min: Int, max: Int) -> Int

@external(erlang, "raylib_ffi", "set_random_seed")
pub fn set_random_seed(seed: Int) -> Nil

@external(erlang, "raylib_ffi", "poll_input_events")
pub fn poll_input_events() -> Nil

@external(erlang, "raylib_ffi", "swap_screen_buffer")
pub fn swap_screen_buffer() -> Nil

@external(erlang, "raylib_ffi", "get_fps")
pub fn get_fps() -> Int

@external(erlang, "raylib_ffi", "get_frame_time")
pub fn get_frame_time() -> Float

@external(erlang, "raylib_ffi", "set_target_fps")
pub fn set_target_fps(fps: Int) -> Nil

@external(erlang, "raylib_ffi", "end_vr_stereo_mode")
pub fn end_vr_stereo_mode() -> Nil

@external(erlang, "raylib_ffi", "end_scissor_mode")
pub fn end_scissor_mode() -> Nil

@external(erlang, "raylib_ffi", "begin_scissor_mode")
pub fn begin_scissor_mode(x: Int, y: Int, width: Int, height: Int) -> Nil

@external(erlang, "raylib_ffi", "end_blend_mode")
pub fn end_blend_mode() -> Nil

@external(erlang, "raylib_ffi", "begin_blend_mode")
pub fn begin_blend_mode(mode: Int) -> Nil

@external(erlang, "raylib_ffi", "end_shader_mode")
pub fn end_shader_mode() -> Nil

@external(erlang, "raylib_ffi", "end_texture_mode")
pub fn end_texture_mode() -> Nil

@external(erlang, "raylib_ffi", "end_mode3_d")
pub fn end_mode3_d() -> Nil

@external(erlang, "raylib_ffi", "end_mode2_d")
pub fn end_mode2_d() -> Nil

@external(erlang, "raylib_ffi", "end_drawing")
pub fn end_drawing() -> Nil

@external(erlang, "raylib_ffi", "begin_drawing")
pub fn begin_drawing() -> Nil

@external(erlang, "raylib_ffi", "clear_background")
pub fn clear_background(color: Color) -> Nil

@external(erlang, "raylib_ffi", "is_cursor_on_screen")
pub fn is_cursor_on_screen() -> Int

@external(erlang, "raylib_ffi", "disable_cursor")
pub fn disable_cursor() -> Nil

@external(erlang, "raylib_ffi", "enable_cursor")
pub fn enable_cursor() -> Nil

@external(erlang, "raylib_ffi", "is_cursor_hidden")
pub fn is_cursor_hidden() -> Int

@external(erlang, "raylib_ffi", "hide_cursor")
pub fn hide_cursor() -> Nil

@external(erlang, "raylib_ffi", "show_cursor")
pub fn show_cursor() -> Nil

@external(erlang, "raylib_ffi", "disable_event_waiting")
pub fn disable_event_waiting() -> Nil

@external(erlang, "raylib_ffi", "enable_event_waiting")
pub fn enable_event_waiting() -> Nil

@external(erlang, "raylib_ffi", "set_clipboard_text")
pub fn set_clipboard_text(text: charlist.Charlist) -> Nil

@external(erlang, "raylib_ffi", "get_window_scale_dpi")
pub fn get_window_scale_dpi() -> Vector2

@external(erlang, "raylib_ffi", "get_window_position")
pub fn get_window_position() -> Vector2

@external(erlang, "raylib_ffi", "get_monitor_refresh_rate")
pub fn get_monitor_refresh_rate(monitor: Int) -> Int

@external(erlang, "raylib_ffi", "get_monitor_physical_height")
pub fn get_monitor_physical_height(monitor: Int) -> Int

@external(erlang, "raylib_ffi", "get_monitor_physical_width")
pub fn get_monitor_physical_width(monitor: Int) -> Int

@external(erlang, "raylib_ffi", "get_monitor_height")
pub fn get_monitor_height(monitor: Int) -> Int

@external(erlang, "raylib_ffi", "get_monitor_width")
pub fn get_monitor_width(monitor: Int) -> Int

@external(erlang, "raylib_ffi", "get_monitor_position")
pub fn get_monitor_position(monitor: Int) -> Vector2

@external(erlang, "raylib_ffi", "get_current_monitor")
pub fn get_current_monitor() -> Int

@external(erlang, "raylib_ffi", "get_monitor_count")
pub fn get_monitor_count() -> Int

@external(erlang, "raylib_ffi", "get_render_height")
pub fn get_render_height() -> Int

@external(erlang, "raylib_ffi", "get_render_width")
pub fn get_render_width() -> Int

@external(erlang, "raylib_ffi", "get_screen_height")
pub fn get_screen_height() -> Int

@external(erlang, "raylib_ffi", "get_screen_width")
pub fn get_screen_width() -> Int

@external(erlang, "raylib_ffi", "set_window_focused")
pub fn set_window_focused() -> Nil

@external(erlang, "raylib_ffi", "set_window_opacity")
pub fn set_window_opacity(opacity: Float) -> Nil

@external(erlang, "raylib_ffi", "set_window_size")
pub fn set_window_size(width: Int, height: Int) -> Nil

@external(erlang, "raylib_ffi", "set_window_max_size")
pub fn set_window_max_size(width: Int, height: Int) -> Nil

@external(erlang, "raylib_ffi", "set_window_min_size")
pub fn set_window_min_size(width: Int, height: Int) -> Nil

@external(erlang, "raylib_ffi", "set_window_monitor")
pub fn set_window_monitor(monitor: Int) -> Nil

@external(erlang, "raylib_ffi", "set_window_position")
pub fn set_window_position(x: Int, y: Int) -> Nil

@external(erlang, "raylib_ffi", "set_window_title")
pub fn set_window_title(title: charlist.Charlist) -> Nil

@external(erlang, "raylib_ffi", "restore_window")
pub fn restore_window() -> Nil

@external(erlang, "raylib_ffi", "minimize_window")
pub fn minimize_window() -> Nil

@external(erlang, "raylib_ffi", "maximize_window")
pub fn maximize_window() -> Nil

@external(erlang, "raylib_ffi", "toggle_borderless_windowed")
pub fn toggle_borderless_windowed() -> Nil

@external(erlang, "raylib_ffi", "toggle_fullscreen")
pub fn toggle_fullscreen() -> Nil

@external(erlang, "raylib_ffi", "clear_window_state")
pub fn clear_window_state(flags: Int) -> Nil

@external(erlang, "raylib_ffi", "set_window_state")
pub fn set_window_state(flags: Int) -> Nil

@external(erlang, "raylib_ffi", "is_window_state")
pub fn is_window_state(flag: Int) -> Int

@external(erlang, "raylib_ffi", "is_window_resized")
pub fn is_window_resized() -> Int

@external(erlang, "raylib_ffi", "is_window_focused")
pub fn is_window_focused() -> Int

@external(erlang, "raylib_ffi", "is_window_maximized")
pub fn is_window_maximized() -> Int

@external(erlang, "raylib_ffi", "is_window_minimized")
pub fn is_window_minimized() -> Int

@external(erlang, "raylib_ffi", "is_window_hidden")
pub fn is_window_hidden() -> Int

@external(erlang, "raylib_ffi", "is_window_fullscreen")
pub fn is_window_fullscreen() -> Int

@external(erlang, "raylib_ffi", "is_window_ready")
pub fn is_window_ready() -> Int

@external(erlang, "raylib_ffi", "window_should_close")
pub fn window_should_close() -> Int

@external(erlang, "raylib_ffi", "close_window")
pub fn close_window() -> Nil

@external(erlang, "raylib_ffi", "init_window")
pub fn init_window(width: Int, height: Int, title: charlist.Charlist) -> Nil